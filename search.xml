<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线程池的使用</title>
      <link href="/2025/04/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/04/27/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="怎么定义线程池"><a href="#怎么定义线程池" class="headerlink" title="怎么定义线程池"></a>怎么定义线程池</h2><h3 id="定义配置类来接收线程池参数"><a href="#定义配置类来接收线程池参数" class="headerlink" title="定义配置类来接收线程池参数"></a>定义配置类来接收线程池参数</h3><p>可以在application.yml中配置线程池相关的参数，将该配置封装为一个类，作为bean注入到spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriggerAppConf</span> &#123;</span><br><span class="line">     <span class="meta">@Value(&quot;$&#123;scheduler.pool.corePoolSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> corePoolSize;<span class="comment">//核心线程数一般根据任务类型配置</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;scheduler.pool.maxPoolSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxPoolSize;<span class="comment">//一般定义为100</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;scheduler.pool.queueCapacity&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> queueCapacity;<span class="comment">//一般定义为9999</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;scheduler.pool.namePrefix&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String namePrefix;<span class="comment">//线程池中线程的名字前缀</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例化线程池作为bean注入到spring容器"><a href="#实例化线程池作为bean注入到spring容器" class="headerlink" title="实例化线程池作为bean注入到spring容器"></a>实例化线程池作为bean注入到spring容器</h3><p>将线程池配置类注入，使用ThreadPoolTaskExecutor构建线程池，进行一系列的参数设置，将构建出的线程池注入到spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span><span class="comment">//运行方法异步执行</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncPool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SchedulerAppConf schedulerAppConf;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;schedulerPool&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">schedulerPoolExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//将该方法的返回值ThreadPoolTaskExecutor作为bean注入到spring容器中</span></span><br><span class="line">        log.info(<span class="string">&quot;start schedulerPoolExecutor&quot;</span>);</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        <span class="comment">//配置核心线程数</span></span><br><span class="line">        executor.setCorePoolSize(schedulerAppConf.getCorePoolSize());</span><br><span class="line">        <span class="comment">//配置最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(schedulerAppConf.getMaxPoolSize());</span><br><span class="line">        <span class="comment">//配置队列大小</span></span><br><span class="line">        executor.setQueueCapacity(schedulerAppConf.getQueueCapacity());</span><br><span class="line">        <span class="comment">//配置线程池中的线程的名称前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(schedulerAppConf.getNamePrefix());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span></span><br><span class="line">        <span class="comment">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">//执行初始化</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="怎么开启线程池的异步处理功能"><a href="#怎么开启线程池的异步处理功能" class="headerlink" title="怎么开启线程池的异步处理功能"></a>怎么开启线程池的异步处理功能</h2><p>1.在application启动类上添加@EnableAsync注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;cn.bitoffer&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XTimerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(XTimerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在实例化线程池时添加@EnableAsync注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span><span class="comment">//运行方法异步执行</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncPool</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.对需要异步处理的方法添加@Async(“schedulerPool”)注解，表示当前方法会放入线程池中异步处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async(&quot;schedulerPool&quot;)</span></span><br><span class="line"><span class="comment">//@Async(&quot;schedulerPool&quot;)：这个注解表示 asyncHandleSlice 方法会在一个新的线程中异步执行。</span></span><br><span class="line"><span class="comment">//Spring会将这个方法提交给名为 schedulerPool 的线程池，线程池的配置是在 AsyncPool 类中定义的（通过 ThreadPoolTaskExecutor）。</span></span><br><span class="line"><span class="comment">//异步执行意味着该方法的调用不会阻塞当前线程，调用者可以继续执行其他操作。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncHandleSlice</span><span class="params">(Date date,<span class="type">int</span> bucketId)</span> &#123;</span><br><span class="line">    ...方法逻辑</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作小计</title>
      <link href="/2025/04/16/%E4%B8%9A%E5%8A%A1%E7%A7%AF%E7%B4%AF/"/>
      <url>/2025/04/16/%E4%B8%9A%E5%8A%A1%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="业务积累"><a href="#业务积累" class="headerlink" title="业务积累"></a>业务积累</h2><h3 id="经纬度定位"><a href="#经纬度定位" class="headerlink" title="经纬度定位"></a>经纬度定位</h3><p>业务中的地图某个点位置是根据经纬度来定位的。但是不同单位使用的地图不一样，可能是百度地图、高德地图等等，但是我们系统中使用的地图只能是一种，所以放入到我们系统中需要进行一个个地图的适配是比较繁琐的，我们统一在后端将不同的地图类型转换为同一个地图类型，然后输出给前端进行响应返回</p><h3 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h3><p>当需要对一张表里的某些字段进行加解密时</p><p>先在controller层创建一个加解密接口，参数为：1.表名tabName，2.加解密参数operation(0为需要加密，1为需要解密)</p><p>**加密流程： **</p><p>然后将该operation参数往下传递，如果operation为0，此时有一张加解密关联表（该表记录了需要加解密的字段），通过遍历该关联表，获取到需要加密的字段，通过SM2算法来进行对字段进行加密（使用SM2算法时，需要先连接密码机，创建连接，生成SM2公钥，进行加密，关闭连接），加密后返回该加密的字段，更新表中原来的字段</p><p><strong>解密流程：</strong></p><p>和加密流程相似</p><p>当operation字段为1，获取关联表中需要加密的字段进行解密（创建连接，连接到密码机后，生成SM2私钥，通过该私钥对字段进行解密，最后关闭连接），返回解密后的数据更新表</p><hr><h2 id="技术积累"><a href="#技术积累" class="headerlink" title="技术积累"></a>技术积累</h2><h3 id="全局异常捕获和状态码返回"><a href="#全局异常捕获和状态码返回" class="headerlink" title="全局异常捕获和状态码返回"></a>全局异常捕获和状态码返回</h3><p><strong>怎么定义全局异常？</strong> </p><p>想要使用全局异常首先需要定义一个<code>GlobalExceptionHandler.java</code>类和自定义异常类<code>DatabaseSetDataException</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseSetDataException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">50001</span>;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DatabaseSetDataException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 数据库异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(DatabaseException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Wrapper <span class="title function_">handleDataAccessException</span><span class="params">(DatabaseSetDataException ex)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;数据库操作失败: &quot;</span>+ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> Wrapper.ERROR_BUILDER <span class="comment">//在这里调用wrapper的Eror_builder会将Wrapper里原先设置的code(-1)进行覆盖，不会产生两个code</span></span><br><span class="line">                .code(ex.getCode())</span><br><span class="line">                .message(<span class="string">&quot;操作失败&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Wrapper是什么？</strong></p><p>Wrapper是状态码的统一返回规范类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span><span class="comment">//启用builder构建者模式</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wrapper</span> <span class="keyword">implements</span> <span class="title class_">ResponseRestful</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功响应 Builder</span></span><br><span class="line">    <span class="comment">//如果使用SUCCESS的话，会先调用suc_builder进行拼接code和message</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">WrapperBuilder</span> <span class="variable">SUCCESS_BUILDER</span> <span class="operator">=</span> Wrapper.builder().code(<span class="number">0</span>).data(<span class="number">0</span>).message(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Wrapper</span> <span class="variable">SUCCESS</span> <span class="operator">=</span> SUCCESS_BUILDER.build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用错误 Builder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">WrapperBuilder</span> <span class="variable">ERROR_BUILDER</span> <span class="operator">=</span> Wrapper.builder().code(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Wrapper</span> <span class="variable">ERROR</span> <span class="operator">=</span> ERROR_BUILDER.message(<span class="string">&quot;ERROR&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 会话错误 Builder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">WrapperBuilder</span> <span class="variable">SESSION_ERROR_BUILDER</span> <span class="operator">=</span> Wrapper.builder().code(<span class="number">510</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Builder构建者模式的使用</strong></p><p>拿上面的Wrapper举例，里面的<code>WrapperBuilder SUCCESS_BUILDER = Wrapper.builder().code(0).data(0).message(&quot;OK&quot;);</code>相当于构建了一个WrapperBuilder对象；只有当<code>Wrapper SUCCESS = SUCCESS_BUILDER.build();</code>使用了builde（）方法，才算是对象构建完成。可以理解为new Wrapper（），然后set属性</p><p><strong>怎么抛出异常，然后被全局异常捕获</strong></p><p>此处是在service层抛出异常，然后被全局异常处理器捕获</p><p>在可能出现异常的地方进行try-catch，catch的异常就是自定义的数据库异常，捕获异常后可以进行对应的异常抛出和处理；当抛出DatabaseSetDataException后会被全局异常处理器捕获到，最后返回对应的错误码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YyAppointmentInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;YyAppointmentInfoMapper, YyAppointmentInfo&gt; <span class="keyword">implements</span> <span class="title class_">IYyAppointmentInfoService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    YyAppointmentInfoMapper yyAppointmentInfoMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataExceptionHandImpl dataExceptionHand;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAppointInfo</span><span class="params">(YyAppointmentInfo appointmentInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            appointmentInfo.setRksj(LocalDateTime.now());</span><br><span class="line">            yyAppointmentInfoMapper.insert(appointmentInfo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DataAccessException e) &#123;</span><br><span class="line">            <span class="comment">//将存入数据异常的对象存入，传入对应的type，异常信息</span></span><br><span class="line">            dataExceptionHand.handleInsertException(appointmentInfo,<span class="number">0</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 业务 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode更新博客要点</title>
      <link href="/2025/04/15/vscode%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E8%A6%81%E7%82%B9/"/>
      <url>/2025/04/15/vscode%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客更新"><a href="#hexo博客更新" class="headerlink" title="hexo博客更新"></a>hexo博客更新</h2><p>需要新增一篇博客时直接在blog文件夹下hexo new “文件名”</p><hr><h2 id="推送信息"><a href="#推送信息" class="headerlink" title="推送信息"></a>推送信息</h2><p>当在vscode更新时需要每次从本地提交到远程，再重新启动才会生效<br>修改完内容后：</p><ol><li>git add -A(添加到缓冲区)</li><li>git commit -m “此次修改的描述信息”</li><li>git push(推送到远程;如果出现fatal: unable to access ‘<a href="https://github.com/legend578/legend578.github.io.git/">https://github.com/legend578/legend578.github.io.git/</a>‘: Failed to connect to 127.0.0.1 port 7897 after 2107 ms: Could not connect to server则进行开启clash代理)<br>hexo d（使得网站重新生效）</li></ol><hr><h2 id="怎么将博客放入到标签和分类中"><a href="#怎么将博客放入到标签和分类中" class="headerlink" title="怎么将博客放入到标签和分类中"></a>怎么将博客放入到标签和分类中</h2><p>在每篇博客的顶部，进行设置categories和tags，想要将该博客归属到哪，就在下面编写对应文字<br><img src="/img/vscode1.png" width="auto" height="auto"></p><h2 id="怎么在博客中插入图片"><a href="#怎么在博客中插入图片" class="headerlink" title="怎么在博客中插入图片"></a>怎么在博客中插入图片</h2><p>使用<img src="/img/vscode1.png" width="auto" height="auto">，使用img标签即可，src填写图片路径，可以是外部图片，也可以是本机图片</p>]]></content>
      
      
      <categories>
          
          <category> 博客初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客怎么更新 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
